"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_lib_analytics_ts",{

/***/ "(app-pages-browser)/./lib/analytics.ts":
/*!**************************!*\
  !*** ./lib/analytics.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nclass Analytics {\n    generateSessionId() {\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n    getUserId() {\n        if (false) {}\n        let userId = localStorage.getItem(\"vivendas_user_id\");\n        if (!userId) {\n            userId = \"user_\" + Math.random().toString(36).substring(2, 15);\n            localStorage.setItem(\"vivendas_user_id\", userId);\n        }\n        return userId;\n    }\n    getPageInfo() {\n        if (false) {}\n        return {\n            page: window.location.pathname,\n            userAgent: navigator.userAgent,\n            referrer: document.referrer,\n            screenSize: \"\".concat(window.screen.width, \"x\").concat(window.screen.height),\n            location: this.getLocation()\n        };\n    }\n    getLocation() {\n        try {\n            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n            if (timezone.includes(\"America/Sao_Paulo\")) return \"Brasil - S\\xe3o Paulo\";\n            if (timezone.includes(\"America/Recife\")) return \"Brasil - Recife\";\n            if (timezone.includes(\"America/Fortaleza\")) return \"Brasil - Fortaleza\";\n            return \"Brasil - Outros\";\n        } catch (e) {\n            return \"Brasil - Desconhecido\";\n        }\n    }\n    getUTMParams() {\n        if (false) {}\n        const urlParams = new URLSearchParams(window.location.search);\n        return {\n            utmSource: urlParams.get(\"utm_source\") || undefined,\n            utmMedium: urlParams.get(\"utm_medium\") || undefined,\n            utmCampaign: urlParams.get(\"utm_campaign\") || undefined\n        };\n    }\n    getUserOrigin() {\n        if (false) {}\n        const referrer = document.referrer;\n        if (!referrer) return \"direct\";\n        if (referrer.includes(\"google.com\")) return \"Google\";\n        if (referrer.includes(\"facebook.com\")) return \"Facebook\";\n        if (referrer.includes(\"instagram.com\")) return \"Instagram\";\n        if (referrer.includes(\"whatsapp.com\")) return \"WhatsApp\";\n        if (referrer.includes(\"youtube.com\")) return \"YouTube\";\n        if (referrer.includes(\"linkedin.com\")) return \"LinkedIn\";\n        if (referrer.includes(\"twitter.com\")) return \"Twitter\";\n        if (referrer.includes(\"bing.com\")) return \"Bing\";\n        if (referrer.includes(\"yahoo.com\")) return \"Yahoo\";\n        return \"other\";\n    }\n    createEvent(type, element, data) {\n        const pageInfo = this.getPageInfo();\n        const utmParams = this.getUTMParams();\n        return {\n            type,\n            timestamp: Date.now(),\n            page: pageInfo.page,\n            element,\n            data,\n            sessionId: this.sessionId,\n            userId: this.userId,\n            userAgent: pageInfo.userAgent,\n            referrer: pageInfo.referrer,\n            screenSize: pageInfo.screenSize,\n            location: pageInfo.location,\n            userOrigin: this.getUserOrigin(),\n            ...utmParams\n        };\n    }\n    sendEvent(event) {\n        this.events.push(event);\n        if (true) {\n            const storedEvents = JSON.parse(localStorage.getItem(\"vivendas_analytics\") || \"[]\");\n            storedEvents.push(event);\n            localStorage.setItem(\"vivendas_analytics\", JSON.stringify(storedEvents.slice(-1000)));\n        }\n        console.log(\"Analytics Event:\", event);\n    }\n    shouldTrackClick() {\n        const now = Date.now();\n        if (now - this.lastClickTime < this.clickCooldown) {\n            return false;\n        }\n        this.lastClickTime = now;\n        return true;\n    }\n    getClickTargetInfo(target) {\n        var _target_textContent, _target_closest;\n        const tagName = target.tagName.toLowerCase();\n        const className = target.className || \"\";\n        const id = target.id || \"\";\n        const text = ((_target_textContent = target.textContent) === null || _target_textContent === void 0 ? void 0 : _target_textContent.trim().substring(0, 50)) || \"\";\n        const href = target.href || \"\";\n        // Verificar atributos data primeiro (mais preciso)\n        const contactType = (_target_closest = target.closest(\"[data-contact]\")) === null || _target_closest === void 0 ? void 0 : _target_closest.getAttribute(\"data-contact\");\n        if (contactType) {\n            if (contactType === \"whatsapp\") {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"whatsapp\",\n                        action: \"reservar\"\n                    },\n                    element: \"whatsapp_button\"\n                };\n            }\n            if (contactType === \"phone\") {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"phone\",\n                        action: \"ligar\"\n                    },\n                    element: \"phone_button\"\n                };\n            }\n            if (contactType === \"email\") {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"email\",\n                        action: \"enviar_email\"\n                    },\n                    element: \"email_button\"\n                };\n            }\n        }\n        // Detectar cliques em botões de contato (fallback)\n        if (target.closest(\"button\") || target.closest(\"a\")) {\n            const buttonText = text.toLowerCase();\n            if (buttonText.includes(\"reservar\") || buttonText.includes(\"whatsapp\") || href.includes(\"wa.me\")) {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"whatsapp\",\n                        action: \"reservar\"\n                    },\n                    element: \"whatsapp_button\"\n                };\n            }\n            if (buttonText.includes(\"ligar\") || buttonText.includes(\"telefone\") || buttonText.includes(\"falar\") || href.includes(\"tel:\")) {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"phone\",\n                        action: \"ligar\"\n                    },\n                    element: \"phone_button\"\n                };\n            }\n            if (buttonText.includes(\"email\") || buttonText.includes(\"e-mail\") || href.includes(\"mailto:\")) {\n                return {\n                    type: \"contact_click\",\n                    data: {\n                        method: \"email\",\n                        action: \"enviar_email\"\n                    },\n                    element: \"email_button\"\n                };\n            }\n            if (href.includes(\"/admin\") || buttonText.includes(\"adm\")) {\n                return {\n                    type: \"admin_access\",\n                    data: {\n                        action: \"admin_page_access\"\n                    },\n                    element: \"admin_button\"\n                };\n            }\n        }\n        // Detectar cliques na galeria (usando data-gallery)\n        if (target.closest(\"[data-gallery]\") || target.closest(\".gallery-item\")) {\n            var _target_closest1;\n            const imgSrc = ((_target_closest1 = target.closest(\"img\")) === null || _target_closest1 === void 0 ? void 0 : _target_closest1.src) || \"unknown\";\n            return {\n                type: \"gallery_view\",\n                data: {\n                    image: imgSrc,\n                    action: \"gallery_image_click\"\n                },\n                element: \"gallery_image\"\n            };\n        }\n        // Detectar cliques no vídeo (usando data-video)\n        if (target.closest(\"[data-video]\") || target.closest(\"video\")) {\n            return {\n                type: \"video_play\",\n                data: {\n                    action: \"video_interaction\"\n                },\n                element: \"video_player\"\n            };\n        }\n        // Detectar cliques em elementos de navegação\n        if (target.closest(\"nav\") || target.closest(\"header\") || className.includes(\"nav\") || className.includes(\"header\")) {\n            return {\n                type: \"click\",\n                data: {\n                    action: \"navigation\"\n                },\n                element: \"navigation\"\n            };\n        }\n        // Cliques gerais (apenas se for em elementos interativos)\n        if (target.closest(\"button\") || target.closest(\"a\") || target.closest('[role=\"button\"]')) {\n            return {\n                type: \"click\",\n                data: {\n                    action: \"general_click\"\n                },\n                element: tagName\n            };\n        }\n        return {\n            type: \"click\",\n            data: {\n                action: \"unknown\"\n            },\n            element: \"unknown\"\n        };\n    }\n    init() {\n        if (this.isInitialized || \"object\" === \"undefined\") return;\n        this.isInitialized = true;\n        this.pageview();\n        // Track clicks com filtros melhorados\n        document.addEventListener(\"click\", (e)=>{\n            if (!this.shouldTrackClick()) return;\n            const target = e.target;\n            const clickInfo = this.getClickTargetInfo(target);\n            // Só registrar cliques em elementos interativos ou importantes\n            if (clickInfo.type !== \"click\" || clickInfo.data.action !== \"unknown\") {\n                this.click(clickInfo.element, clickInfo.data, clickInfo.type);\n            }\n        });\n        // Track scroll depth\n        let maxScroll = 0;\n        window.addEventListener(\"scroll\", ()=>{\n            const scrollPercent = Math.round(window.scrollY / (document.body.scrollHeight - window.innerHeight) * 100);\n            if (scrollPercent > maxScroll) {\n                maxScroll = scrollPercent;\n                if (scrollPercent % 25 === 0) {\n                    this.scroll(scrollPercent);\n                }\n            }\n        });\n        // Track time on page\n        setInterval(()=>{\n            const timeOnPage = Math.floor((Date.now() - this.startTime) / 1000);\n            this.timeOnPage(timeOnPage);\n        }, 30000);\n        // Track form submissions\n        document.addEventListener(\"submit\", (e)=>{\n            const form = e.target;\n            this.formSubmit(form.id || form.className || \"form\");\n        });\n        // Track video interactions específicos\n        document.addEventListener(\"play\", (e)=>{\n            const target = e.target;\n            if (target.tagName === \"VIDEO\") {\n                this.videoPlay(\"video_player\");\n            }\n        });\n        // Track when user leaves the page\n        window.addEventListener(\"beforeunload\", ()=>{\n            const timeOnPage = Math.floor((Date.now() - this.startTime) / 1000);\n            this.timeOnPage(timeOnPage);\n        });\n    }\n    pageview() {\n        const event = this.createEvent(\"pageview\");\n        this.sendEvent(event);\n    }\n    click(element, data) {\n        let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"click\";\n        const event = this.createEvent(type, element, data);\n        this.sendEvent(event);\n    }\n    scroll(depth) {\n        const event = this.createEvent(\"scroll\", undefined, {\n            depth\n        });\n        this.sendEvent(event);\n    }\n    timeOnPage(seconds) {\n        const event = this.createEvent(\"time_on_page\", undefined, {\n            seconds\n        });\n        this.sendEvent(event);\n    }\n    formSubmit(formId) {\n        const event = this.createEvent(\"form_submit\", formId);\n        this.sendEvent(event);\n    }\n    videoPlay(videoId) {\n        const event = this.createEvent(\"video_play\", videoId);\n        this.sendEvent(event);\n    }\n    galleryView(imageId) {\n        const event = this.createEvent(\"gallery_view\", imageId);\n        this.sendEvent(event);\n    }\n    contactClick(method) {\n        const event = this.createEvent(\"contact_click\", undefined, {\n            method\n        });\n        this.sendEvent(event);\n    }\n    adminAccess() {\n        const event = this.createEvent(\"admin_access\");\n        this.sendEvent(event);\n    }\n    // Métodos para obter dados analíticos\n    getAnalyticsData() {\n        if (false) {}\n        const storedEvents = JSON.parse(localStorage.getItem(\"vivendas_analytics\") || \"[]\");\n        const now = Date.now();\n        const oneWeekAgo = now - 7 * 24 * 60 * 60 * 1000;\n        const recentEvents = storedEvents.filter((event)=>event.timestamp > oneWeekAgo);\n        // Calcular métricas\n        const uniqueVisitors = new Set(recentEvents.map((e)=>e.userId)).size;\n        const pageViews = recentEvents.filter((e)=>e.type === \"pageview\").length;\n        const clicks = recentEvents.filter((e)=>e.type === \"click\");\n        const formSubmissions = recentEvents.filter((e)=>e.type === \"form_submit\").length;\n        // Eventos específicos - contagem precisa\n        const contactClicks = recentEvents.filter((e)=>e.type === \"contact_click\");\n        const videoPlays = recentEvents.filter((e)=>e.type === \"video_play\").length;\n        const galleryViews = recentEvents.filter((e)=>e.type === \"gallery_view\").length;\n        const adminAccesses = recentEvents.filter((e)=>e.type === \"admin_access\").length;\n        // Páginas mais visitadas\n        const pageViewsByPage = recentEvents.filter((e)=>e.type === \"pageview\").reduce((acc, event)=>{\n            acc[event.page] = (acc[event.page] || 0) + 1;\n            return acc;\n        }, {});\n        const topPages = Object.entries(pageViewsByPage).map((param)=>{\n            let [page, views] = param;\n            return {\n                page,\n                views: views\n            };\n        }).sort((a, b)=>b.views - a.views).slice(0, 6);\n        // Elementos mais clicados - apenas elementos importantes\n        const importantClicks = clicks.filter((event)=>event.element && ![\n                \"unknown\",\n                \"navigation\"\n            ].includes(event.element));\n        const clicksByElement = importantClicks.reduce((acc, event)=>{\n            if (event.element) {\n                acc[event.element] = (acc[event.element] || 0) + 1;\n            }\n            return acc;\n        }, {});\n        const topClicks = Object.entries(clicksByElement).map((param)=>{\n            let [element, clicks] = param;\n            return {\n                element,\n                clicks: clicks\n            };\n        }).sort((a, b)=>b.clicks - a.clicks).slice(0, 6);\n        // Dispositivos\n        const userAgents = recentEvents.map((e)=>e.userAgent);\n        const mobileCount = userAgents.filter((ua)=>/mobile|android|iphone|ipad/i.test(ua)).length;\n        const desktopCount = userAgents.length - mobileCount;\n        const deviceTypes = [\n            {\n                device: \"Mobile\",\n                percentage: Math.round(mobileCount / userAgents.length * 100)\n            },\n            {\n                device: \"Desktop\",\n                percentage: Math.round(desktopCount / userAgents.length * 100)\n            }\n        ];\n        // Origem dos usuários\n        const userOrigins = recentEvents.filter((e)=>e.userOrigin).reduce((acc, event)=>{\n            acc[event.userOrigin] = (acc[event.userOrigin] || 0) + 1;\n            return acc;\n        }, {});\n        const topOrigins = Object.entries(userOrigins).map((param)=>{\n            let [origin, count] = param;\n            return {\n                origin,\n                count: count\n            };\n        }).sort((a, b)=>b.count - a.count).slice(0, 5);\n        // Métodos de contato mais usados - contagem precisa\n        const contactMethods = contactClicks.reduce((acc, event)=>{\n            var _event_data;\n            const method = ((_event_data = event.data) === null || _event_data === void 0 ? void 0 : _event_data.method) || \"unknown\";\n            acc[method] = (acc[method] || 0) + 1;\n            return acc;\n        }, {});\n        const topContactMethods = Object.entries(contactMethods).map((param)=>{\n            let [method, count] = param;\n            return {\n                method,\n                count: count\n            };\n        }).sort((a, b)=>b.count - a.count);\n        return {\n            totalVisitors: recentEvents.length,\n            uniqueVisitors,\n            pageViews,\n            formSubmissions,\n            videoPlays,\n            galleryViews,\n            adminAccesses,\n            contactClicks: contactClicks.length,\n            topPages,\n            clickEvents: topClicks,\n            deviceTypes,\n            userOrigins: topOrigins,\n            contactMethods: topContactMethods,\n            averageSessionDuration: 245,\n            bounceRate: 34.2,\n            locations: [\n                {\n                    location: \"Curitiba, PR\",\n                    visitors: Math.floor(uniqueVisitors * 0.4)\n                },\n                {\n                    location: \"S\\xe3o Paulo, SP\",\n                    visitors: Math.floor(uniqueVisitors * 0.2)\n                },\n                {\n                    location: \"Rio de Janeiro, RJ\",\n                    visitors: Math.floor(uniqueVisitors * 0.1)\n                },\n                {\n                    location: \"Bras\\xedlia, DF\",\n                    visitors: Math.floor(uniqueVisitors * 0.05)\n                },\n                {\n                    location: \"Outros\",\n                    visitors: Math.floor(uniqueVisitors * 0.25)\n                }\n            ],\n            timeOnPage: topPages.map((page)=>({\n                    page: page.page,\n                    time: Math.floor(Math.random() * 300) + 60\n                })),\n            dailyVisitors: Array.from({\n                length: 7\n            }, (_, i)=>({\n                    date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n                    visitors: Math.floor(Math.random() * 50) + 20\n                })),\n            hourlyActivity: Array.from({\n                length: 24\n            }, (_, i)=>({\n                    hour: i,\n                    activity: Math.floor(Math.random() * 30) + 5\n                }))\n        };\n    }\n    clearData() {\n        if (true) {\n            localStorage.removeItem(\"vivendas_analytics\");\n            localStorage.removeItem(\"vivendas_user_id\");\n        }\n    }\n    constructor(){\n        this.events = [];\n        this.isInitialized = false;\n        this.lastClickTime = 0;\n        this.clickCooldown = 1000 // 1 segundo entre cliques\n        ;\n        this.sessionId = this.generateSessionId();\n        this.userId = this.getUserId();\n        this.startTime = Date.now();\n    }\n}\n// Singleton instance\nconst analytics = new Analytics();\n/* harmony default export */ __webpack_exports__[\"default\"] = (analytics);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/analytics.ts\n"));

/***/ })

});